{
  "_args": [
    [
      {
        "raw": "react-native-ble-manager@git+ssh://git@192.111.110.19:1022/ReactNative/bleManger.git",
        "scope": null,
        "escapedName": "react-native-ble-manager",
        "name": "react-native-ble-manager",
        "rawSpec": "git+ssh://git@192.111.110.19:1022/ReactNative/bleManger.git",
        "spec": "ssh://git@192.111.110.19:1022/ReactNative/bleManger.git",
        "type": "git"
      },
      "/Users/lenghonglin/Desktop/SmartLock1.3.x"
    ]
  ],
  "_from": "git+ssh://git@192.111.110.19:1022/ReactNative/bleManger.git",
  "_id": "react-native-ble-manager@3.2.0",
  "_inCache": true,
  "_location": "/react-native-ble-manager",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-ble-manager@git+ssh://git@192.111.110.19:1022/ReactNative/bleManger.git",
    "scope": null,
    "escapedName": "react-native-ble-manager",
    "name": "react-native-ble-manager",
    "rawSpec": "git+ssh://git@192.111.110.19:1022/ReactNative/bleManger.git",
    "spec": "ssh://git@192.111.110.19:1022/ReactNative/bleManger.git",
    "type": "git"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+ssh://git@192.111.110.19:1022/ReactNative/bleManger.git#b85deee80cf34b00a013415ec1da06c7c5e3adf1",
  "_shasum": "72dbe9cc4167c31ac37ab890023060d5e989be21",
  "_shrinkwrap": null,
  "_spec": "react-native-ble-manager@git+ssh://git@192.111.110.19:1022/ReactNative/bleManger.git",
  "_where": "/Users/lenghonglin/Desktop/SmartLock1.3.x",
  "author": {
    "name": "zhouling"
  },
  "dependencies": {},
  "description": "react-natvie bleManager by wushanyun.top, server is by appupdates.wsy.me , current proto ver is 1.0.",
  "devDependencies": {},
  "gitHead": "b85deee80cf34b00a013415ec1da06c7c5e3adf1",
  "keywords": [
    "react-native"
  ],
  "license": "ISC",
  "main": "BleManager.js",
  "name": "react-native-ble-manager",
  "optionalDependencies": {},
  "readme": "# react-native-ble-manager\n[![npm version](https://img.shields.io/npm/v/react-native-ble-manager.svg?style=flat)](https://www.npmjs.com/package/react-native-ble-manager)\n[![npm downloads](https://img.shields.io/npm/dm/react-native-ble-manager.svg?style=flat)](https://www.npmjs.com/package/react-native-ble-manager)\n[![GitHub issues](https://img.shields.io/github/issues/innoveit/react-native-ble-manager.svg?style=flat)](https://github.com/innoveit/react-native-ble-manager/issues)\n\nThis is a porting of https://github.com/don/cordova-plugin-ble-central project to React Native.\n\n##Supported Platforms\n- iOS\n- Android (API 18)\n\n##Install\n```shell\nnpm i --save react-native-ble-manager\n```\n####iOS\n- Open the node_modules/react-native-ble-manager/ios folder and drag BleManager.xcodeproj into your Libraries group.\n- Check the \"Build Phases\"of your project and add \"libBleManager.a\" in the \"Link Binary With Libraries\" section.\n\n####Android\n#####Update Gradle Settings\n\n```gradle\n// file: android/settings.gradle\n...\n\ninclude ':react-native-ble-manager'\nproject(':react-native-ble-manager').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-ble-manager/android')\n```\n#####Update Gradle Build\n\n```gradle\n// file: android/app/build.gradle\n...\n\ndependencies {\n    ...\n    compile project(':react-native-ble-manager')\n}\n```\n#####Register React Package\n```java\n...\nimport it.innove.BleManagerPackage; // <--- import\n\npublic class MainApplication extends Application implements ReactApplication {\n\n    ...\n\n    @Override\n    protected List<ReactPackage> getPackages() {\n        return Arrays.<ReactPackage>asList(\n            new MainReactPackage(),\n            new BleManagerPackage() // <------ add the package\n        );\n    }\n\n    ...\n}\n```\n\n##Basic Example\n```js\nclass BleExample extends Component {\n\n    constructor(){\n        super()\n\n        this.state = {\n            ble:null,\n            scanning:false,\n        }\n    }\n\n    componentDidMount() {\n        this.handleDiscoverPeripheral = this.handleDiscoverPeripheral.bind(this);\n\n        NativeAppEventEmitter\n            .addListener('BleManagerDiscoverPeripheral', this.handleDiscoverPeripheral );\n    }\n\n    handleScan() {\n        BleManager.scan([], 30, true)\n            .then((results) => console.log('Scanning...'); );\n    }\n\n    toggleScanning(bool){\n        if (bool) {\n            this.setState({scanning:true})\n            this.scanning = setInterval( ()=> this.handleScan(), 3000);\n        } else{\n            this.setState({scanning:false, ble: null})\n            clearInterval(this.scanning);\n        }\n    }\n\n    handleDiscoverPeripheral(data){\n        console.log('Got ble data', data);\n        this.setState({ ble: data })\n    }\n\n    render() {\n\n        const container = {\n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: '#F5FCFF',\n        }\n\n        const bleList = this.state.ble\n            ? <Text> Device found: {this.state.ble.name} </Text>\n            : <Text>no devices nearby</Text>\n\n        return (\n            <View style={container}>\n                <TouchableHighlight style={{padding:20, backgroundColor:'#ccc'}} onPress={() => this.toggleScanning(!this.state.scanning) }>\n                    <Text>Scan Bluetooth ({this.state.scanning ? 'on' : 'off'})</Text>\n                </TouchableHighlight>\n\n                {bleList}\n            </View>\n        );\n    }\n}\n```\n\n##Methods\n\n### scan(serviceUUIDs, seconds)\nScan for availables peripherals.\nReturns a `Promise` object.\n\n__Arguments__\n- `serviceUUIDs` - `Array of String` - the UUIDs of the services to looking for. On Android the filter works only for 5.0 or newer.\n- `seconds` - `Integer` - the amount of seconds to scan.\n- `allowDuplicates` - `Boolean` - [iOS only] allow duplicates in device scanning\n\n__Examples__\n```js\nBleManager.scan([], 5, true)\n  .then(() => {\n    // Success code\n    console.log('Scan started');\n  });\n\n```\n\n### stopScan()\nStop the scanning.\nReturns a `Promise` object.\n\n__Examples__\n```js\nBleManager.stopScan()\n  .then(() => {\n    // Success code\n    console.log('Scan stopped');\n  });\n\n```\n\n### connect(peripheralId)\nAttempts to connect to a peripheral.\nReturns a `Promise` object.\n\n__Arguments__\n- `peripheralId` - `String` - the id/mac address of the peripheral to connect.\n\n__Examples__\n```js\nBleManager.connect('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX')\n  .then(() => {\n    // Success code\n    console.log('Connected');\n  })\n  .catch((error) => {\n    // Failure code\n    console.log(error);\n  });\n```\n\n### disconnect(peripheralId)\nDisconnect from a peripheral.\nReturns a `Promise` object.\n\n__Arguments__\n- `peripheralId` - `String` - the id/mac address of the peripheral to disconnect.\n\n__Examples__\n```js\nBleManager.disconnect('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX')\n  .then(() => {\n    // Success code\n    console.log('Disconnected');\n  })\n  .catch((error) => {\n    // Failure code\n    console.log(error);\n  });\n```\n\n### checkState()\nForce the module to check the state of BLE and trigger a BleManagerDidUpdateState event.\n\n__Examples__\n```js\nBleManager.checkState();\n```\n\n### startNotification(peripheralId, serviceUUID, characteristicUUID)\nStart the notification on the specified characteristic.\nReturns a `Promise` object.\n\n__Arguments__\n- `peripheralId` - `String` - the id/mac address of the peripheral.\n- `serviceUUID` - `String` - the UUID of the service.\n- `characteristicUUID` - `String` - the UUID of the characteristic.\n\n__Examples__\n```js\nBleManager.startNotification('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX')\n  .then(() => {\n    // Success code\n    console.log('Notification started');\n  })\n  .catch((error) => {\n    // Failure code\n    console.log(error);\n  });\n```\n\n### stopNotification(peripheralId, serviceUUID, characteristicUUID)\nStop the notification on the specified characteristic.\nReturns a `Promise` object.\n\n__Arguments__\n- `peripheralId` - `String` - the id/mac address of the peripheral.\n- `serviceUUID` - `String` - the UUID of the service.\n- `characteristicUUID` - `String` - the UUID of the characteristic.\n\n### read(peripheralId, serviceUUID, characteristicUUID)\nRead the current value of the specified characteristic.\nReturns a `Promise` object.\n\n__Arguments__\n- `peripheralId` - `String` - the id/mac address of the peripheral.\n- `serviceUUID` - `String` - the UUID of the service.\n- `characteristicUUID` - `String` - the UUID of the characteristic.\n\n__Examples__\n```js\nBleManager.read('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX')\n  .then((readData) => {\n    // Success code\n    console.log('Read: ' + readData);\n  })\n  .catch((error) => {\n    // Failure code\n    console.log(error);\n  });\n```\n\n### write(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize)\nWrite with response to the specified characteristic.\nReturns a `Promise` object.\n\n__Arguments__\n- `peripheralId` - `String` - the id/mac address of the peripheral.\n- `serviceUUID` - `String` - the UUID of the service.\n- `characteristicUUID` - `String` - the UUID of the characteristic.\n- `data` - `String` - the data to write in Base64 format.\n- `maxByteSize` - `Integer` - specify the max byte size before splitting message\n\nTo get the `data` into base64 format, you will need a library like `base64-js`. Install `base64-js`:\n\n`npm install base64-js --save`\n\nTo format the data before calling the write function:\n```js\nvar base64 = require('base64-js');\nvar data = base64.fromByteArray(yourData);\n```\n\n__Examples__\n```js\nBleManager.write('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', data)\n  .then(() => {\n    // Success code\n    console.log('Write: ' + data);\n  })\n  .catch((error) => {\n    // Failure code\n    console.log(error);\n  });\n```\n\n### writeWithoutResponse(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize)\nWrite without response to the specified characteristic.\nReturns a `Promise` object.\n\n__Arguments__\n- `peripheralId` - `String` - the id/mac address of the peripheral.\n- `serviceUUID` - `String` - the UUID of the service.\n- `characteristicUUID` - `String` - the UUID of the characteristic.\n- `data` - `String` - the data to write in Base64 format.\n- `maxByteSize` - `Integer` - specify the max byte size\n\nTo get the `data` into base64 format, you will need a library like `base64-js`. Install `base64-js`:\n\n`npm install base64-js --save`\n\nTo format the data before calling the write function:\n```js\nvar base64 = require('base64-js');\nvar data = base64.fromByteArray(yourData);\n```\n\n__Examples__\n```js\nBleManager.writeWithoutResponse('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', data)\n  .then(() => {\n    // Success code\n    console.log('Writed: ' + data);\n  })\n  .catch((error) => {\n    // Failure code\n    console.log(error);\n  });\n```\n\n### getConnectedPeripherals(serviceUUIDs)\nReturn the connected peripherals.\nReturns a `Promise` object.\n\n__Arguments__\n- `serviceUUIDs` - `Array of String` - the UUIDs of the services to looking for.\n\n__Examples__\n```js\nBleManager.getConnectedPeripherals([])\n  .then((peripheralsArray) => {\n    // Success code\n    console.log('Connected peripherals: ' + peripheralsArray.length);\n  });\n\n```\n\n### getDiscoveredPeripherals()\nReturn the discovered peripherals after a scan.\nReturns a `Promise` object.\n\n__Examples__\n```js\nBleManager.getDiscoveredPeripherals([])\n  .then((peripheralsArray) => {\n    // Success code\n    console.log('Discovered peripherals: ' + peripheralsArray.length);\n  });\n\n```\n\n### isPeripheralConnected(peripheralId, serviceUUIDs)\nCheck whether a specific peripheral is connected and return `true` or `false`.\nReturns a `Promise` object.\n\n__Examples__\n```js\nBleManager.isPeripheralConnected('XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX', [])\n  .then((isConnected) => {\n    if (isConnected) {\n      console.log('Peripheral is connected!');\n    } else {\n      console.log('Peripheral is NOT connected!');\n    }\n  });\n\n```\n\n##Events\n### BleManagerStopScan\nThe scanning for peripherals is ended.\n\n__Arguments__\n- `none`\n\n__Examples__\n```js\nNativeAppEventEmitter.addListener(\n    'BleManagerStopScan',\n    () => {\n        // Scanning is stopped\n    }\n);\n```\n\n###  BleManagerDidUpdateState\nThe BLE change state.\n\n__Arguments__\n- `state` - `String` - the new BLE state ('on'/'off').\n\n__Examples__\n```js\nNativeAppEventEmitter.addListener(\n    'BleManagerDidUpdateState',\n    (args) => {\n        // The new state: args.state\n    }\n);\n```\n\n###  BleManagerDiscoverPeripheral\nThe scanning find a new peripheral.\n\n__Arguments__\n- `id` - `String` - the id of the peripheral\n- `name` - `String` - the name of the peripheral\n\n__Examples__\n```js\nNativeAppEventEmitter.addListener(\n    'BleManagerDiscoverPeripheral',\n    (args) => {\n        // The id: args.id\n        // The name: args.name\n    }\n);\n```\n\n###  BleManagerDidUpdateValueForCharacteristic\nA characteristic notify a new value.\n\n__Arguments__\n- `peripheral` - `String` - the id of the peripheral\n- `characteristic` - `String` - the UUID of the characteristic\n- `value` - `String` - the read value in Hex format\n\n###  BleManagerConnectPeripheral\nA peripheral was connected.\n\n__Arguments__\n- `peripheral` - `String` - the id of the peripheral\n\n###  BleManagerDisconnectPeripheral\nA peripheral was disconnected.\n\n__Arguments__\n- `peripheral` - `String` - the id of the peripheral\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "http://192.111.110.19/ReactNative/bleManger.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "3.2.0"
}
